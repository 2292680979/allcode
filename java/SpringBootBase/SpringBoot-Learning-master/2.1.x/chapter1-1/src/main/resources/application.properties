#可以在这里配置如容器端口名、数据库链接信息、日志级别等各种配置信息

#指定容器端口
#server.port=8888

#指定应用名
#spring.application.name=hello

#配置信息，结合Book的value注释，可以实现在spring加载Book类的时候初始化值
book.name="Spring-Boot"
book.author="xie jie hui"
#参数引用
book.desc=${book.author} is writing ${book.name}

#自定义属性  与配置book一样
#随机产生int，long，String   有些参数我们希望它每次加载的时候不是一个固定的值，比如：密钥、服务端口等
#String
com.didispace.chapter11.value=${random.value}
#int
com.didispace.chapter11.number=${random.int}
#long
com.didispace.chapter11.bignumber=${random.long}
#10以内的随机数
com.didispace.chapter11.test1=${random.int(10)}


#命令行启动  如在命令行中：java -jar xxx.jar --server.port=8888   连续的两个减号--就是对application.properties中的属性值进行赋值的标识
#通过此特性，理论上已经使得我们应用的属性在启动前是可变的，所以其中端口号也好、数据库连接也好，都是可以在应用启动时发生改变

#多环境配置，通常同一套程序会被应用和安装到几个不同的环境，比如：开发、测试、生产等
#通过配置多份不同环境的配置文件，再通过打包命令指定需要打包的内容之后进行区分打包，这里不详细介绍

#一下是等价的，配置文件不区分大小写，排除特殊字符
spring.jpa.databaseplatform=mysql
#spring.jpa.database-platform=mysql

#List类型
spring.my-example.url=http://example.com,http://spring.io
#或者  下面这种只能是连续的，0，1，2，3不能0，2
#spring.my-example.url[0]=http://example.com
#spring.my-example.url[1]=http://spring.io

#map类型
spring.my-example.foo=bar
spring.my-example.hello=world


